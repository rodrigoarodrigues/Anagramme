version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: termo-sqlserver
    ports:
      - "1433:1433"
    environment:
      - SA_PASSWORD=TermoPassword123!
      - ACCEPT_EULA=Y
      - MSSQL_PID=Developer
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./database/scripts:/docker-entrypoint-initdb.d
    networks:
      - termo-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TermoPassword123! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # .NET API Backend
  termo-api:
    build:
      context: ./backend
      dockerfile: Termo.API/Dockerfile
    container_name: termo-api
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000;https://+:5001
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=TermoDB;User Id=sa;Password=TermoPassword123!;TrustServerCertificate=true;
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - termo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  termo-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: termo-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:5000
      - VITE_API_URL_HTTPS=https://localhost:5001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - termo-api
    networks:
      - termo-network
    command: npm run dev -- --host 0.0.0.0

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: termo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - termo-frontend
      - termo-api
    networks:
      - termo-network
    profiles:
      - production

volumes:
  sqlserver_data:
    driver: local

networks:
  termo-network:
    driver: bridge
